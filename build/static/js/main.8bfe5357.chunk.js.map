{"version":3,"sources":["components/Banner.jsx","api.js","components/PlaintextField.jsx","components/LaTeXField.jsx","components/MainContainer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Banner","Container","fluid","className","src","alt","href","HOST","process","translate","plaintext","a","requestOptions","method","headers","body","JSON","stringify","fetch","text","json","response","PlaintextField","value","onChange","onTranslate","Card","CardBody","Input","name","type","placeholder","CardFooter","Button","color","disabled","onClick","LaTeXField","useState","codeView","setCodeView","copied","setCopied","outline","contents","dAnchor","document","createElement","file","Blob","URL","createObjectURL","download","Math","round","Date","now","appendChild","click","onCopy","setTimeout","MainContainer","latex","state","setState","handleChange","e","target","handleTranslate","res","Row","Col","md","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8bfe5357.chunk.js","sourcesContent":["import { Container } from \"reactstrap\";\n\nconst Banner = () => {\n    return (\n        <Container\n            fluid\n            className=\"text-center mt-5 pt-3 mb-4 d-flex flex-column justify-content-center align-items-center\"\n        >\n            <div>\n                <img src=\"/banner.svg\" className=\"banner-img\" alt=\"TransLaTeX\" />\n                <div className=\"poweredby-text text-right\">\n                    Powered by\n                    <img src=\"/openai.svg\" className=\"poweredby-img mx-2\" alt=\"OpenAI\" />Â·\n                    <a href=\"https://github.com/ArenaGrenade/TransLaTeX\">\n                        <img src=\"/github.svg\" className=\"mb-1 github-img\" alt=\"GitHub\" />\n                    </a>\n                </div>\n            </div>\n        </Container>\n    );\n};\n\nexport default Banner;\n","const HOST = process.env.HOST || \"/api\";\n\nexport const translate = async (plaintext) => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            plaintext: plaintext,\n        }),\n    };\n\n    try {\n        var text = (await fetch(`${HOST}/completions`, requestOptions)).json();\n        return text;\n    } catch (err) {\n        return err.response;\n    }\n};\n","import { Button, Card, CardBody, CardFooter, Input } from \"reactstrap\";\n\nconst PlaintextField = ({ value, onChange, onTranslate }) => {\n    return (\n        <Card className=\"shadow-sm textfield-container\">\n            <CardBody className=\"p-3 p-md-4\">\n                <Input\n                    name=\"plaintext\"\n                    type=\"textarea\"\n                    className=\"textfield-input\"\n                    placeholder=\"Type some plain text...\"\n                    value={value}\n                    onChange={onChange}\n                    // TODO: better placeholder, possibly an example\n                />\n            </CardBody>\n            <CardFooter className=\"px-3 d-flex justify-content-end\">\n                <Button color=\"success\" disabled={value === \"\"} onClick={onTranslate}>\n                    TRANSLATE\n                </Button>\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default PlaintextField;\n","import { useState } from \"react\";\nimport { Button, Card, CardBody, CardFooter, Input } from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Latex from \"react-latex-next\";\n\nconst LaTeXField = ({ value, onChange }) => {\n    const [codeView, setCodeView] = useState(false);\n    const [copied, setCopied] = useState(false);\n\n    const toggleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 5000);\n    };\n\n    const triggerDownload = () => {\n        const contents =\n            `\\\\documentclass[14pt]{extreport}\\n` +\n            `\\\\begin{document}\\n` +\n            `\\t$$${value}$$\\n` +\n            `\\\\end{document}\\n`;\n        const dAnchor = document.createElement(\"a\");\n        const file = new Blob([contents], { type: \"text/plain\" });\n        dAnchor.href = URL.createObjectURL(file);\n        dAnchor.download = `TransLaTeX-${Math.round(Date.now() / 1000)}.tex`;\n        document.body.appendChild(dAnchor);\n        dAnchor.click();\n    };\n\n    return (\n        <Card className={`shadow-sm textfield-container${codeView ? \"-dark\" : \"\"}`}>\n            {value ? (\n                <Button\n                    outline\n                    color={codeView ? \"light\" : \"dark\"}\n                    className=\"code-toggle\"\n                    onClick={() => setCodeView(!codeView)}\n                >\n                    {`VIEW ${codeView ? \"LATEX\" : \"CODE\"}`}\n                </Button>\n            ) : null}\n            <CardBody className=\"p-3 p-md-4\">\n                {codeView ? (\n                    <Input\n                        name=\"latex\"\n                        type=\"textarea\"\n                        className=\"textfield-input-dark\"\n                        placeholder=\"Type some LaTeX...\"\n                        value={value}\n                        onChange={onChange}\n                        // TODO: better placeholder, possibly an example\n                    />\n                ) : (\n                    <Latex>{`$$ ${value} $$`}</Latex>\n                )}\n            </CardBody>\n            <CardFooter className=\"px-3 d-flex justify-content-end\">\n                <Button\n                    color=\"danger\"\n                    className=\"mr-3\"\n                    disabled={value === \"\"}\n                    onClick={triggerDownload}\n                >\n                    DOWNLOAD .TEX\n                </Button>\n                <CopyToClipboard text={value} onCopy={toggleCopy}>\n                    <Button color=\"primary\" disabled={value === \"\"}>\n                        {copied ? \"COPIED!\" : \"COPY CODE\"}\n                    </Button>\n                </CopyToClipboard>\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default LaTeXField;\n","import { useState } from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport { translate } from \"../api\";\n\nimport PlaintextField from \"./PlaintextField\";\nimport LaTeXField from \"./LaTeXField\";\n\nconst MainContainer = () => {\n    const [state, setState] = useState({\n        plaintext: \"Integration of x in the range 2 to 3\",\n        latex: \"\\\\int\\\\limits_{2}^{3}x dx\",\n    });\n\n    const handleChange = (e) => {\n        setState({ ...state, [e.target.name]: e.target.value });\n    };\n\n    const handleTranslate = async () => {\n        const res = await translate(state.plaintext);\n        setState({ ...state, latex: res });\n    };\n\n    return (\n        <Row className=\"p-2 p-md-4\">\n            <Col md className=\"my-2\">\n                <PlaintextField\n                    value={state.plaintext}\n                    onChange={handleChange}\n                    onTranslate={handleTranslate}\n                />\n            </Col>\n            <Col md className=\"my-2\">\n                <LaTeXField value={state.latex} onChange={handleChange} />\n            </Col>\n        </Row>\n    );\n};\n\nexport default MainContainer;\n","import \"./App.css\";\nimport { Container } from \"reactstrap\";\n\nimport Banner from \"./components/Banner\";\nimport MainContainer from \"./components/MainContainer\";\n\nconst App = () => {\n    return (\n        <Container fluid className=\"px-md-5\">\n            <Banner />\n            <MainContainer />\n        </Container>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}